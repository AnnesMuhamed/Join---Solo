
<h1>Programmier-Witze</h1>


    ONCLICK KANN MAN ZU JEDEM HTML TAG VERWENDEN!
    z.b. :
    <a href="#" onclick="joke1()">Witz 1</a>
    <a href="#" onclick="joke2()">Witz 2</a>
    <a href="#" onclick="joke3()">Witz 2</a>
    Jetzt sind die Links da statt die buttons.


    <button onclick="joke1()">Witz 1</button>
    <button onclick="joke2()">Witz 2</button>
    <button onclick="joke3()">Witz 3</button>

    <p id="joke">
        Die Selbsthilfegruppe ,,HTML-Sonderzeichen-Probleme" trifft sich heute im groß Saal.
    </p>

    function dann bezeichnung aus dem onclick atribut im tag () {} document.getElementById('id aus dem tag').innerHTML = für die HTML ausgabe aus dem Webbroser usw.
    <script>
        function joke1 () {
            document.getElementById('joke').innerHTML = 'Was macht ein Pirat am Computer? Er drückt die Entertaste!'; HTML Tag wie <b> um etwas Fett zu drucken innterHTML möglich sowie andere HTML tags!
        }

        function joke2() {
            document.getElementById('joke').innerHTML = 'HTML-Sonderzeichen-Probleme" trifft sich heute im groß Saal.';
        }

        function joke3() {
            document.getElementById('joke').innerHTML = 'Wo geht ein Programmierer morgens hin? Auf die Arbyte.'; Wenn mann '' durch rückwerts zeichen ` ersetzt kann man mehrere zeilen innerHTML einfügen und <br> usw z.b.
        }

        function joke3() {
            document.getElementById('joke').innerHTML = `Wo geht ein Programmierer morgens hin? Auf die Arbyte. es ist ebenfalls möglich ein img tag für ein bild innerHTML einzufügen, dem eine classe vergeben und im css zu stylen z.b.
            <br>
            <img classe="funny-image" src="/kochwelt/img/funny.png">
            `;

            // Durch die Rückwärts anführungszeichen innerHTML ist es möglich
                // in javascript mehrere html tags einzusetzten, und den Tags kann 
                // man auch classen vergeben um sie dann im css zu verändern.
        }



        <a href="#" onclick="greet()">Greet</a>

    <p id="greeting">
        
    </p>
    
    <script>
        function greet() {
            let x = 'Annes';   //Variable (let) x = 'Annes' der name weisst auf dem x der dann in ${x} ausgegeben wird 
            document.getElementById('greeting').innerHTML = `Hallo ${x} Wie geht es dir?`;
        }

        ---------------------------------------------------------------------------------------------------------------
       
       
        <input><button onclick="greetFromTextField()">Grüße</button>   Textfeld mit Button

    <p id="greeting">
        
    </p>
    
    <script>
        function greetFromTextField() {       //Diese funktion ruft die untere funktion auf mit 'greet(name)';
            let name = 'Clara';
            greet(name);
        }


        function greet(x) {   //das (x) ist die Variable 'Clara' und wird dann innerHTML ausgegeben
            document.getElementById('greeting').innerHTML = `Hallo ${x} Wie geht es dir?`;
        }


    </script>



    <h1>Programmier Witze</h1>
    

    <input id="namefield">   was du in dem eingabefeld eingibst, wird unter doc...value; im HTML ausgegeben 

    <button onclick="greetFromTextField()">Grüße</button>   

    <p id="greeting"> 
        
    </p>
    
    <script>
        function greetFromTextField() { 
            let name = document.getElementById('namefield').value;  
            greet(name);
        }


        function greet(x) { 
            document.getElementById('greeting').innerHTML = `Hallo ${x} Wie geht es dir?`;
        }

    </script>
</script>

--------------------------------------------------------------------------------------------


<input id="number1" type="number">
<input id="number2" type="number">
<button onclick="add()">Addieren</button>

<h1 id="headline"></h1>

    
<script>                       
  function add(){
    let myFirstNumber = +document.getElementById('number1').value;    // Das + zeichen hinter dem document.. lässt beide variablen miteinander Addieren
    let mySecondNumber = +document.getElementById('number2').value;
    let result = myFirstNumber + mySecondNumber;
    document.getElementById('headline').innerHTML = `Das Ergebnis ist ${result}`;
  }
</script>

--------------------------------------------------------------------------------------------
<title>Pfannkuchen</title>

    <style>
        table {
            font-family: Arial, Helvetica, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }

        table td, table th {
            border: 1px solid #ddd;
            padding: 8px;
        }

        table tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        table tr:hover {
            background-color: #ddd;
        }

        table th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: #04AA6D;
            color: white;
        }
    </style>
</head>
<body>
    <h1>Rezept für Pfannkuchen</h1>
    <button onclick="addAll()">Zutat Laden</button>

    <table id="table">
        <tr>
            <td>Menge</td>
            <td>Name</td>
        </tr>

    </table>

    <script>

        function addAll() {
            addIngredient('200g', 'Milch');
            addIngredient('200g', 'Mehl');
            addIngredient('200g', 'Salz');
            addIngredient('2', 'Eier');
        }
        

     
        function addIngredient(menge, name) {
            document.getElementById('table').innerHTML += `
            <tr>
            <td>${menge}</td>
            <td>${name}</td>
        </tr>
        `;
        }
                        /* button durch addAll(); ersetzen und die zutaten werde direkt geladen*/
        
    </script>

    ----------------------------------------------------------------------------------------
        // Arrays   .... DOM bedeutet HTML Elemente.

        let names = ['hans', 'Peter', 'Max'];

        function addNames () {
            let list = document.getElementById('list'); // <ul id="list"></ul>
            list.innerHTML = ''; // Leerer text, damit die gleichen namen nicht immer mit hinzugefügt werden wenn ein 
                                 // -neuer name hinzugefügt wird durch das input Feld.
            for (let i = 0; i < names.length; i++) { // Schleife für das Array.
                let li = document.createElement('li'); // Liste durch creatElement erstellt.
                li.innerHTML = names[i] + '<a href="#" onclick="deleteItem('+ i +')">x</a>'; // Alle namen aus dem Array ausgebenlassen in einer liste. +/plus einen link um den eingegebenen wert mit einer onclick funktion zu löschen.
                list.appendChild(li);               // appendChild() bindet alle listen elemente an ul.
            }
        }

        function deleteItem(i){  // 
            names.splice(i, 1); // mit .splice(i, 1) an der stelle 1 löschen.
            addNames(); // aus dem textfeld löschen.
        }

        function addCurrentName() { 	// addCurrentName(); onclick function vom button.
            if (names.length < 5) {     // wenn array names < kleiner als 5 ist soll der untere code ausgeführt werden.                                
                let currentName = document.getElementById('new-name').value;  // die id new-name aus dem input.
                names.push(currentName); //names.push(currentName);  name des Arrays names.push() in die klammer kommt die 
                                     // Variable die die werte  in das names Array hinzufügen.
                addNames(); // damit die werte in die liste hinzugefügt werde die in der addNames(); function sind.
                document.getElementById('new-name').value = ''; // nach dem hinzufügen wird das eingabefeld wieder leer.


            } else { // ansonsten, wenn mehr als 5 namen eingegeben werden wird der Fehler Angezeigt.
                alert('Es können nur 5 Namen hinzugefügt werden.');
            }
        }




        





















    ----------------------------------------------------------------------------------------

    <h1>Rezept für Pfannkuchen</h1>
    <button onclick="addAll()">Zutat Laden</button>

    <table id="table">
        <tr>
            <td>Menge</td>
            <td>Name</td>
        </tr>

    </table>

    <input id="newName" type="text" placeholder="Menge Hinzufügen" min="0">
    <input id="newMenge" type="text" placeholder="Zutat Hinzufügen" min="0">
    <button onclick="newIngredient()">Hinzufügen</button>

    <script>                                                                           /* Zutaten durcch Klicken Hinzufügen*/
        function newIngredient(){
            let newName = document.getElementById('newName').value;
            let newMenge = document.getElementById('newMenge').value;
            addIngredient(newName, newMenge);

            document.getElementById('newName').value = '';
            document.getElementById('newMenge').value = '';
        }

        function addAll() {
            addIngredient('200g', 'Milch');
            addIngredient('200g', 'Mehl');
            addIngredient('200g', 'Salz');
            addIngredient('2', 'Eier');
        }

     
        function addIngredient(menge, name) {
            document.getElementById('table').innerHTML += `
            <tr>
            <td>${menge}</td>
            <td>${name}</td>
        </tr>
        `;
        }
    </script>
        ------------------------------------------------------------------------------------

        <script>
        function imageOne() {
            document.getElementById('image').src = 'bild2.jpg';
        }

        function imageTwo() {
            document.getElementById('image').src = 'bild1.jpg'; /* Bild Ändern per Klick auf dem Butten. Dabei schreibt man ein img tag und ändert das bild auf das zweite bild per klick auf den mit dem zweiten button im function bereich .src = 'bild1';  */
        }
        
    </script>
    <style>
        img {
            width: 100%;
        }
    </style>
</head>
<body>

    <button onclick="imageTwo()">Bild2</button>
    <button onclick="imageOne()">Bild1</button>
    <img id="image" src="bild1.jpg">

</body>
</html>

--------------------------------------------------------------------------------------------

<script>
    function imageOne() { /* Durch setTimeout(imageTwo, 3000); definieren wir den wechsel der nächsten function um das nächste bild innerhalb 3000 milisekunden aufzurufen um sie dann in einer widerholten schleife zu versetzten. */
        document.getElementById('image').src = 'bild1.jpg';
        setTimeout(imageTwo, 3000);
    }

    function imageTwo() {
        document.getElementById('image').src = 'bild2.jpg';
        setTimeout(imagethree, 3000);
    }

    function imagethree() {
        document.getElementById('image').src = 'bild3.jpg';
        setTimeout(imageOne, 3000);
    }
    
</script>
<style>
    img {
        width: 100%;
    }
</style>
</head>
<body>   <!-- Durch <body onload="imageOne()"> ersetzen wir den Button in eine Automatische schleife ohne klick-->

<button onclick="imageTwo()">Start!</button>
<img id="image" src="bild1.jpg">

</body>

--------------------------------------------------------------------------------------------
<script>
let images = ['bild2.jpg', 'bild1.jpg', 'bild3.jpg', 'bild4.jpg', 'bild5.jpg'];
let i = 0; // Variable definiert i = wert von 0 Beginnen. 0 bedeutet 1 und 1 bedeutet 2 usw.....

function imageOne() {
    document.getElementById('image').src = images[i]; // i hat den Wert 0
    i++; // i++; bedeutet den Wert um 1 Erhöhen
    setTimeout(imageTwo, 3000);
}

function imageTwo() {
    document.getElementById('image').src = images[i]; // i hat den Wert 1
    i++;
    setTimeout(imagethree, 3000);
}

function imagethree() {
    document.getElementById('image').src = images[i]; // i hat den Wert 2
    i = 0; // Fängt wieder bei 0 an. (also imageOne 1.)
    setTimeout(imageOne, 3000);
}

</script>
<style>
body {
    margin: 0;
}

img {
    width: 100%;
}
</style>
</head>
<body onload="imageOne()">
<img id="image" src="bild1.jpg">

</body>

--------------------------------------------------------------------------------------------

<script>
    let images = ['bild2.jpg', 'bild1.jpg', 'bild3.jpg', 'bild4.jpg', 'bild5.jpg'];
    let currentImage = 0;
    
    function start() {  // 2. diese function wird ausgeführt sobald die seite geladen wird. function start ruft die function showImage auf.
        showImage(currentImage); // 3. showImage bekommt als Variable dieses currentImage vergeben mit dem wert 0, dadurch wird dem function parameter fonction showImage(i) das i übergeben und wird mit der Variable currentImage aufgerufen
        currentImage++;  // 5. Im nächsten schritt wird das i um 1 erhöht mit currentImage ++;  (die Variable wird um 1 erhöht)

        if (currentImage == 5) {  // 7. Mit der if abfrage unterbinden wir das die bilder von 1 immer weiter bis unendlich um 1 erhöht wird in dem wir if (currentImage == 5) die Variable unter if auf bis zu 5 geben.
            currentImage = 0;     // 7.1 Das heisst sobald wir if (currentimage == 5) vergeben können wir innerhalb der Geschweiften klammer {} den wert der Variable wieder auf 0; setzten damit der immer von 0 um 1 erhöht wird bis 5 und wieder auf 0
        }

        setTimeout(start, 1000); // 6. mit setTimeout(start, 1000) hier wird dann die function start() nach eine millisekunde immer wieder aufgerufen, dadurch werde alle bilder nacheinander aufgerufen
    }

    function showImage(i) {
        document.getElementById('image').src = images[i]; // 4. so wird das aller erste bild angezeigt
        
    }
</script>
<style>
    body {
        margin: 0;
    }
    
    img {
        width: 100%;
    }
</style>
</head>
<body onload="start()"> <!-- 1. Sobald unsere seite geladen ist wird function "start" ausgeführt-->

<img id="image" src="bild1.jpg">
    
</body>

----------------------------------------------------------------------------------------------------------

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Witze</title>
  <script>
    let images = ['bild2.jpg', 'bild1.jpg', 'bild3.jpg', 'bild4.jpg', 'bild5.jpg'];
    let currentImage = 0;

    function start() {
      let millisecons = +document.getElementById('inputfield').value * 1000;

      if (millisecons > 10000) { // Wenn die secunden Größer als 10 Sekunden eingegeben wird 
        alert('Bitte kleinere Zahl eingeben'); // Kommt eine Fehlermeldung
      } else { // Und wenn die Eingegebene Zahl kleiner und als 10 sekunden eingegeben wird, wird der Code nach dem else weiter geführt.

        if (millisecons < 1000) { // Wenn die Zahl kleiner als 1 Sekunde ist 
          alert('Bitte mindestens eine Sekunde als Zeit angeben!'); // Kommt ein fehler 
        } else { // Und wenn nicht, dann Startet die Diashow unter dem else code
          showImage(currentImage);
          currentImage++;


          if (currentImage == 5) {
            currentImage = 0;
          }

          setTimeout(start, millisecons);

        }
      }
    }

    function showImage(i) {
      document.getElementById('image').src = images[i];

    }
  </script>
  <style>
    body {
      margin: 0;
    }

    img {
      width: 100%;
    }
  </style>
</head>

<body>

  <input type="number" id="inputfield" placeholder="Wie viele Sekunden?"> <button onclick="start()">Start</button>
  <img id="image" src="bild1.jpg">

</body>

----------------------------------------------------------------------------------------------------------
<script>
    function insertDoors() {
    for(let i = 1; i < 25; i++) // for= in der Geschweiften Klammer{} alles wiederholen. let i = 0; das ist der wert bei dem wir anfangen wollen. i < 10= Wiederholen solange i ist kleiner als 10. i++;= immer um einen erhöhen, in dem fall solange bs es die 10 erreicht wegen dem i < 10; 
    document.getElementById('body').innerHTML += `<div class="door">${i}</div>`; //${i} setzt die zahlen von i bis < 25 in die divs
}
</script>

<style>
    body {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }
       .door {
        width: 150px;
        height: 150px;
        background-color: yellow;
        margin: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 48px;
       }
</style>
<body id="body" onload="insertDoors()">
    
</body>

---------------------------------------------------------------------------------------------------------------

<script>
    let todos = ['Einkaufen', 'Putzen', 'Kochen', 'Spazieren', 'Spazieren', 'Spazieren', 'Spazieren'];

function showTodos() {
    for(let i = 0; i < todos.length; i++) { // durch den wert der Variable todos, können wir in der for Schleife i < 4; durch i < todos.length; ersetzten damit wir nicht immer den wert kleiner als x ändern müssen, wenn wir ein neues todo in Aray hinzufügen möchten.
    document.getElementById('mylist').innerHTML += `<li>${todos[i]}</li>`;
    }
}
</script>

---------------------------------------------------------------------------------------------------------------

<script>
    let todos = ['Einkaufen', 'Putzen', 'Kochen', 'Spazieren'];

function showTodos() {
    document.getElementById('mylist').innerHTML = ``; //Gleiches Prinziep wie bei zeile 14.
    for(let i = 0; i < todos.length; i++) { // durch den wert der Variable todos, können wir in der for Schleife i < 4; durch i < todos.length; ersetzten damit wir nicht immer den wert kleiner als x ändern müssen, wenn wir ein neues todo in Aray hinzufügen möchten.
    document.getElementById('mylist').innerHTML += `<li>${todos[i]}<a href="#" onclick="deleteTodo(${i})">X</li>`;//<a href="#" onclick="deleteTodo(${i})">X Aus einem Array Löschen.
    }
}

function addTodo() {
    let todo = document.getElementById('myinput').value;
    todos.push(todo); //Der liste weitere todos hinzufügen
    showTodos(); //Nach dem Hinzufügen werden die in der Liste Angezeigt.
    document.getElementById('myinput').value = ``; //Damit das eingabefeld nach dem Hinzufügen leer bleibt, nach .value = ``;
}

function deleteTodo(position) {
    todos.splice(position, 1); // Aus einem Array Löschen.
    showTodos();
}
</script>

<body onload="showTodos()">
    <ul id="mylist"></ul>
    <input id="myinput"> <button onclick="addTodo()">Hinzufügen</button>
</body>

---------------------------------------------------------------------------------------------------------------

<script>
    function calc() {
    let number = +document.getElementById('input').value; //Durch das + weiss das eingabefeld das es sich um eine zahl handelt, selbst wenn da Text steht.
    

    alert(getResultText(number, powerOf2(number))); //Die tiefste klammer wird immer zuerst gelöst. Im alert wwird dir dein return rausgegeben.
}   //Die Variablen wie 'number' hat nichts mit den Variablen in den Anderen Functionen zutun. 'number' hat nur was mit der function zutun in den geschweiften klammern.

function powerOf2(x) { //x=2
    return x*x; // Aus einer Funktion Zurück geben. x * x = 2*2
}

function getResultText(number, result) {// number = 2, result = 4        Nochmal die variablen number und result sind nur unter dieser Function Möglich.
    return `The result of ${number}² is ${result}`; // return gibt den text `The result of ${number}² is ${result}` zurück mit den eigebenen Variablen
}
</script>

<body>
    <input type="text" id="input"> <button onclick="calc()">Calc</button>
</body>
---------------------------------------------------------------------------------------------------------------

<script>
    function hide(id) {
    document.getElementById(id).classList.add('d-none');
}

function show(id) {
    document.getElementById(id).classList.remove('d-none');
}
</script>

<style>
        .rectangle {
            height: 150px;
            width: 150px;
            background-color: yellow;
            margin: 8px;
        }

        .d-none {
            display: none;
        }
    </style>
</head>
<body>
<button onclick="show('1')">1</button>
<button onclick="show('2')">2</button>
<button onclick="show('3')">3</button>
<button onclick="show('4')">4</button>

    <div id="1" onclick="hide('1')" class="rectangle"></div>
    <div id="2" onclick="hide('2')" class="rectangle"></div>
    <div id="3" onclick="hide('3')" class="rectangle"></div>
    <div id="4" onclick="hide('4')" class="rectangle"></div>
</body>

---------------------------------------------------------------------------------------------------------------

Variablen Speichern:

<script>
    let name;


function saveName() {
    name = document.getElementById('input').value;

    localStorage.setItem('name', name); // Dadurch wird eine Variable gespeichert.

    document.getElementById('headline').innerHTML = `Hallo ${name}`;
}

function loadName() {
    name = localStorage.getItem('name'); // Abfrage wer zuletzt eingegeben wurde.
    document.getElementById('headline').innerHTML = `Zuletzt war ${name} hier!`;

}
</script>

<body>
<h1 id="headline"></h1>

    <button onclick="loadName()">Wer war zuletzt hier?</button>

    <input id="input" type="text">
    <button onclick="saveName()">Speichern</button>
</body>

---------------------------------------------------------------------------------------------------------------

Array permanent speichern:

<script>
    let names = [];

function loadName() {
    name = getArray ('names'); // Abfrage wer zuletzt eingegeben wurde. Alle die in einem Array gepackt wurden durch das eingeben im textfeld.
    document.getElementById('headline').innerHTML = `Zuletzt war ${name} hier!`;
}

function saveName() {
    let name = document.getElementById('input').value;
    names.push(name);
    saveArrayToLocalStorage('names', names); //Function Speicher.

    document.getElementById('headline').innerHTML = `Hallo ${names}`;
}

function saveArrayToLocalStorage(key, array) {
    localStorage.setItem(key, JSON.stringify(array)); //Function laden.
}

function getArray(key) {
    return JSON.parse(localStorage.getItem(key)); // Das gibt uns nur den Text zurück. JSON.parse Wandelt alles in einem Array um.
}
</script>

<body>
<h1 id="headline"></h1>

    <button onclick="loadName()">Wer war zuletzt hier?</button>

    <input id="input" type="text">
    <button onclick="saveName()">Hinzufügen</button>
</body>

---------------------------------------------------------------------------------------------------------------

Variablen Scope:

<script>
function test() {
            
            console.log(x);
            
            if(true) {
                const x = 10;
                console.log(x);
            }
        }

    let // Innerhalb geschweifter klammer der function gültig
    var // innerhalb der Fuktion gültig, selbst wenn die in einem if statement ist, ist sie für die komplette funktion.
    const // nur innerhalb der geschweiften Klammern gültig.

    function test() {
            
            if(true) {
                let x = 2;  // let x = 2; ist nur innerhalb der if abfrage gültig.
                console.log(x);
            }
            console.log(x);

            test2();
        }

        function test2() {

            console.log(x);
        }

        function test() {
            let x = 2;  // ist für die function sowohl als auch für if gültig.
            if(true) {
                
                console.log(x);
            }
            console.log(x);

            test2();
        }

        function test2() {

            console.log(x);
        }
</script>

<script>
    let x = 10; // wenn die variable ausserhalb deklariert wird dann ist sie eine globale Variable.

function myFunction() {
  let y = 20; // let = deklariert, ins leben gerufen. diese variable ist nur für die geschweeiften klammern.
  console.log(y);
}

myFunction();
console.log(y); // Globale Variable

let y = 10;

function myFunction() {
  y = 20; // wenn hier nur ein wert Deklariert wird, übernimmt er den wert von y = 20
  console.log(y);
}

myFunction();
console.log(y);

function myFunction() {
    let x = 10;
    if (x == 10) {
      let x = 20; // der innerste wert innerhalb der geschweiften klammern wird zu erst aufgerufen.
      console.log(x);
    }
    console.log(x);
  }
  
  myFunction();
  console.log(x);

  let a = 10;

function outerFunction() {
  let b = 20;

  innerFunction(40); //(40, b)
}

function innerFunction(c) { // let c = 40 wegen innerFunction(40); und somit 40, b
  let d = 30;
  console.log(`a=${a}, b=${b}, c=${c}, d=${d}`); // der wert b wird nicht übergeben bis nach der (40, b) nicht der wert neben der zahl angegeben wird.
}

outerFunction();
</script>

---------------------------------------------------------------------------------------------------------------

Bundesländer :

.card {
    border: 1px solid rgba(0, 0, 0, 0.1);
    margin: 20px;
    padding: 10px;
}

<body onload="render()">

    <div id="content">


    </div>
</body>

let bundeslaender = [ 
    {
        "name": "Baden-Württemberg",
        "population": 11.1,
        "url": "https://www.baden-wuerttemberg.de/de/startseite/",
        "comments": []
    },
    {
        "name": "Bayern",
        "population": 13.1,
        "url": "https://www.bayern.de/",
        "comments": ['Tolles Wetter und gute Wander-Routen', 'München ist eine schöne Stadt']
    },
    {
        "name": "Berlin",
        "population": 3.7,
        "url": "https://www.berlin.de/",
        "comments": []
    },
    {
        "name": "Brandenburg",
        "population": 2.5,
        "url": "https://www.brandenburg.de/",
        "comments": []
    },
    {
        "name": "Bremen",
        "population": 0.7,
        "url": "https://www.bremen.de/",
        "comments": ['Die Stadtmusikanten haben mir schon immer gefallen!']
    },
    {
        "name": "Hamburg",
        "population": 1.8,
        "url": "https://www.hamburg.de/",
        "comments": ['Ein wirklich tolles Bundesland']
    },
    {
        "name": "Hessen"
        "population": 6.3,
        "url": "https://www.hessen.de/",
        "comments": []
    },
    {
        "name": "Mecklenburg-Vorpommern",
        "population": 1.6,
        "url": "https://www.mecklenburg-vorpommern.de/startseite/",
        "comments": []
    },
    {
        "name": "Niedersachsen",
        "population": 8,
        "url": "https://www.niedersachsen.de/startseite/",
        "comments": []
    },
    {
        "name": "Nordrhein-Westfalen",
        "population": 17.9,
        "url": "https://www.land.nrw/",
        "comments": []
    },
    {
        "name": "Rheinland-Pfalz",
        "population": 4.1,
        "url": "https://www.rlp.de/de/startseite/",
        "comments": []
    },
    {
        "name": "Saarland",
        "population": 1,
        "url": "https://www.saarland.de/DE/home/home_node.html",
        "comments": []
    },
    {
        "name": "Sachsen",
        "population": 4.1,
        "url": "https://www.sachsen.de/",
        "comments": []
    },
    {
        "name": "Sachsen-Anhalt",
        "population": 2.2,
        "url": "https://www.sachsen-anhalt.de/startseite/",
        "comments": []
    },
    {
        "name": "Schleswig-Holstein",
        "population": 2.9,
        "url": "https://www.schleswig-holstein.de/DE/Home/home_node.html",
        "comments": []
    },
    {
        "name": "Thüringen",
        "population": 2.1,
        "url": "https://thueringen.de/",
        "comments": []
    }
];

function render(){
    let content = document.getElementById('content');
    content.innerHTML = '';

    for (let i = 0; i < bundeslaender.length; i++) {
        const land = bundeslaender[i];
        content.innerHTML += `
            <div class="card">
                <h2>${land['name']}</h2>

                <div id="landcontent${i}"></div>
                <input id="input${i}"><button onclick="addComment(${i})">OK</button>
            </div>
        `;

        let landcontent = document.getElementById(`landcontent${i}`);
        
        for (let j = 0; j < land['comments'].length; j++) {
            const comment = land['comments'][j];
            landcontent.innerHTML += `<div>${comment}</div>`;
        }
    
    }
}


function addComment(index) {
    let input = document.getElementById(`input${index}`);
    bundeslaender[index]['comments'].push(input.value);
    render(); //Damit die eingegebenen Kommentare angezeigt bzw. hochgeladen werden.
    input.value = ''; // Damit das input feld nach der eingabe wieder leer ist.
}


_____________________________________________________________________________________________



const menu = [
    {
        "speciality": 'Pizza Margherita',
        "ingredients": 'Mit Mozzarella, Olivenöl Extra Vergine, frischem Basilikum & hausgemachter Tomaten Sauce',
        "size": 'Wahl aus: 26 cm, 32 cm',
        "price": 'Preis: 8,00€',
        "button": '+'
    },
    {
        "speciality": 'Pizza Tonno',
        "ingredients": 'mit Thunfisch, roten Zwiebeln, Mozzarella & hausgemachter Tomaten Sauce',
        "size": 'Wahl aus: 26 cm, 32 cm',
        "price": 'Preis: 11,50€',
        "button": '+'
    },
    {
        "speciality": 'Pizza Spinaci',
        "ingredients": 'mit Bio Baby-Spinat, edlem Gorgonzola, Mozzarella & hausgemachter Tomaten Sauce',
        "size": 'Wahl aus: 26 cm, 32 cm',
        "price": 'Preis: 12,90€',
        "button": '+'
    },
    {
        "speciality": 'Pizza Napoli',
        "ingredients": 'mit Sardellen, schwarzen gerösteten Oliven, Kapern, Oregano, Mozzarella & hausgemachter Tomaten Sauce',
        "size": 'Wahl aus: 26 cm, 32 cm',
        "price": 'Preis: 13,50€',
        "button": '+'
    },
    {
        "speciality": 'Pizza Quattro Formaggi',
        "ingredients": 'mit Mozzarella, Gorgonzola, Provolone, gehobeltem Parmigiano Reggiano, frischem Basilikum & hausgemachter Tomaten Sauce',
        "size": 'Wahl aus: 26 cm, 32 cm',
        "price": 'Preis: 13,90€',
        "button": '+'
    },
];

let shoppingCart = [];

function render() {
    let orderBox = document.getElementById('orderBox');
    
    orderBox.innerHTML = ``;

    for (let i = 0; i < menu.length; i++) {
        const menus = menu[i];
        orderBox.innerHTML += `
        <div class="card">
            <div class="insideCard">
                <h2 class="menuHeadline">${menus['speciality']}</h2>
                <p class="menuHeadline">${menus['ingredients']}</p>
                <p class="menuHeadline">${menus['size']}</p>
                <p class="menuHeadline">${menus['price']}</p>
            </div>
    
            <div>
                <button onclick="addToBasket(${i})" class="x">+</button>
            </div>
        </div>
        `;

}
    

}

function addToBasket(index) {
    let sidebar = document.getElementById('sidebar');
    let selectProduct = menu[index];
    shoppingCart.push(selectProduct);

    sidebar.innerHTML = `
        <h2>Warenkorb</h2>
        <ul id="cartList"></ul>
    `;

    updateCart();

}

function updateCart() {
    var cartList = document.getElementById('cartList');
    cartList.innerHTML = '';

}

______________________________________________________________________________________
<button onclick="save(event)"></button>


function save(event) { 
    event.stopPropagation();  // Das ist eine standard function von Js damit unterbindet man (Popup)
}

______________________________________________________________________________________

function updateSidebarIcon() {
    const sidebarIcon = document.getElementById('sidebar-icon');
    const cartItems = document.querySelectorAll('.basket-container');

    if (cartItems.length > 0) {
        sidebarIcon.style.display = 'none';
    } else {
        sidebarIcon.style.display = 'block';
    }
}


// function addToBasket(basket, prices) {
//     let index = basket.indexOf(basket, prices);
    
//     if(index == -1) {
        
//     } else {
//         amounts[index]++;
//     }
// }
























// const menu = [
//     {
//         speciality: 'Pizza Margherita',
//         ingredients: 'Mit Mozzarella, Olivenöl Extra Vergine, frischem Basilikum & hausgemachter Tomaten Sauce',
//         size: 'Wahl aus: 26 cm, 32 cm',
//         price: '8,00€'
//     },
//     {
//         speciality: 'Pizza Tonno',
//         ingredients: 'mit Thunfisch, roten Zwiebeln, Mozzarella & hausgemachter Tomaten Sauce',
//         size: 'Wahl aus: 26 cm, 32 cm',
//         price: '11,50€'
//     },
//     {
//         speciality: 'Pizza Spinaci',
//         ingredients: 'mit Bio Baby-Spinat, edlem Gorgonzola, Mozzarella & hausgemachter Tomaten Sauce',
//         size: 'Wahl aus: 26 cm, 32 cm',
//         price: '12,90€'
//     },
//     {
//         speciality: 'Pizza Napoli',
//         ingredients: 'mit Sardellen, schwarzen gerösteten Oliven, Kapern, Oregano, Mozzarella & hausgemachter Tomaten Sauce',
//         size: 'Wahl aus: 26 cm, 32 cm',
//         price: '13,50€'
//     },
//     {
//         speciality: 'Pizza Quattro Formaggi',
//         ingredients: 'mit Mozzarella, Gorgonzola, Provolone, gehobeltem Parmigiano Reggiano, frischem Basilikum & hausgemachter Tomaten Sauce',
//         size: 'Wahl aus: 26 cm, 32 cm',
//         price: '13,90€'
//     },
// ];

// function render() {
//     const orderBox = document.getElementById('orderBox');
    
//     orderBox.innerHTML = ``;

//     for (let i = 0; i < menu.length; i++) {
//         const menus = menu[i];
//         orderBox.innerHTML += `
//         <div class="product">
//             <div class="product-details">
//                 <h2 class="menuHeadline">${menus.speciality}</h2>
//                 <p class="menuHeadline">${menus.ingredients}</p>
//                 <p class="menuHeadline">${menus.size}</p>
//             </div>
    
//             <div class="product-price">
//                 <span>${menus.price}</span>
//                 <button onclick="addToBasket(${i})" class="x">+</button>
//             </div>
//         </div>
//         `;
//     }

//     updateSidebarIcon();
//     endPrice(); // Hier wird endPrice() aufgerufen, um den Gesamtpreis zu aktualisieren
// }

// function addToBasket(index) {
//     const cartItem = document.getElementById('sidebar');
//     const selectedItem = menu[index];

//     let quantity = 1;

//     const newBasketItem = document.createElement('div');
//     newBasketItem.classList.add('basket-container');

//     newBasketItem.innerHTML = `
//         <div class="added-product">
//         <hr>
//             <div class="product-details">
//                 <span>${quantity}x ${selectedItem.speciality}</span>
//                 <button onclick="updateQuantity(${index}, -1)" class="quantity-button">-</button>
//                 <span id="quantity-${index}">${quantity}</span>
//                 <button onclick="updateQuantity(${index}, 1)" class="quantity-button">+</button>
//             </div>
    
//             <div class="product-price">
//                 <span id="price-${index}">${selectedItem.price}</span>
//                 <span id="total-${index}">Total: ${calculateTotal(selectedItem.price, quantity)}</span>
//                 <button onclick="removeFromBasket(this)" class="remove-from-basket">x</button>
//             </div>
//         </div>
//     `;

//     cartItem.appendChild(newBasketItem);

//     updateSidebarIcon();
//     endPrice(); 
// }

// function updateQuantity(index, change) {
//     const quantityElement = document.getElementById(`quantity-${index}`);
//     let quantity = parseInt(quantityElement.textContent) + change;

//     if (quantity >= 1) {
//         quantityElement.textContent = quantity;
//         updateTotalPrice(index);
//     }
// }

// function removeFromBasket(button) {
//     const itemToRemove = button.parentElement.parentElement.parentElement;
//     const priceElement = itemToRemove.querySelector('.product-price span');
//     const totalPriceElement = document.getElementById('total-price');

//     const price = parseFloat(priceElement.textContent.replace('€', '').replace(',', '.'));

//     itemToRemove.remove();

//     let totalPrice = parseFloat(totalPriceElement.textContent.replace('€', '').replace(',', ''));

//     totalPrice -= price;

//     if (totalPrice <= 0) {
//         totalPriceElement.textContent = "0.00€";
//     } else {
//         totalPriceElement.textContent = totalPrice.toFixed(2) + '€';
//     }

//     updateSidebarIcon();
// }



// function calculateTotal(price, quantity) {
//     const totalPrice = price * quantity;
//     return totalPrice.toFixed(2) + '€';
// }

// function removeFromBasket(button) {
//     const itemToRemove = button.parentElement.parentElement.parentElement;
//     itemToRemove.remove();

//     updateSidebarIcon();
//     endPrice();
// }

// function updateSidebarIcon() {
//     const sidebarIcon = document.getElementById('sidebar-icon');
//     const cartItems = document.querySelectorAll('.basket-container');

//     if (cartItems.length > 0) {
//         sidebarIcon.style.display = 'none';
//     } else {
//         sidebarIcon.style.display = 'block';
//     }
// }

// function updateTotalPrice(index) {
//     const quantityElement = document.getElementById(`quantity-${index}`);
//     const priceElement = document.getElementById(`price-${index}`);
//     const totalElement = document.getElementById(`total-${index}`);

//     const quantity = parseInt(quantityElement.textContent);
//     const price = parseFloat(priceElement.textContent.replace('€', '').replace(',', '.'));

//     const total = calculateTotal(price, quantity);
//     totalElement.textContent = `Total: ${total}`;

//     updateSidebarIcon();
// }

// function endPrice() {
//     const cartItems = document.querySelectorAll('.basket-container');

//     let totalPrice = 0;
//     let selectedProducts = {};

//     cartItems.forEach((item) => {
//         const nameElement = item.querySelector('.product-details span');
//         const priceElement = item.querySelector('.product-price span');
//         const quantityElement = item.querySelector('.product-details span');

//         const productName = nameElement.textContent;
//         const price = parseFloat(priceElement.textContent.replace('€', '').replace(',', '.'));
//         const quantity = parseInt(quantityElement.textContent);

//         totalPrice += price * quantity;

//         if (selectedProducts[productName]) {
//             selectedProducts[productName] += quantity;

//         } else {
//             selectedProducts[productName] = quantity;
//         }
//     });
    
//     const totalPriceElement = document.getElementById('total-price');
//     totalPriceElement.textContent = totalPrice.toFixed(2) + '€';
    
// }


// function placeOrder() {
//     alert('Vielen Dank für Ihre Bestellung!');
// }

___________________________________________________________________


const menu = [
        {
            speciality: 'Pizza Margherita',
            ingredients: 'Mit Mozzarella, Olivenöl Extra Vergine, frischem Basilikum & hausgemachter Tomaten Sauce',
            size: 'Wahl aus: 26 cm, 32 cm',
            price: '8,00€'
        },
        {
            speciality: 'Pizza Tonno',
            ingredients: 'mit Thunfisch, roten Zwiebeln, Mozzarella & hausgemachter Tomaten Sauce',
            size: 'Wahl aus: 26 cm, 32 cm',
            price: '11,50€'
        },
        {
            speciality: 'Pizza Spinaci',
            ingredients: 'mit Bio Baby-Spinat, edlem Gorgonzola, Mozzarella & hausgemachter Tomaten Sauce',
            size: 'Wahl aus: 26 cm, 32 cm',
            price: '12,90€'
        },
        {
            speciality: 'Pizza Napoli',
            ingredients: 'mit Sardellen, schwarzen gerösteten Oliven, Kapern, Oregano, Mozzarella & hausgemachter Tomaten Sauce',
            size: 'Wahl aus: 26 cm, 32 cm',
            price: '13,50€'
        },
        {
            speciality: 'Pizza Quattro Formaggi',
            ingredients: 'mit Mozzarella, Gorgonzola, Provolone, gehobeltem Parmigiano Reggiano, frischem Basilikum & hausgemachter Tomaten Sauce',
            size: 'Wahl aus: 26 cm, 32 cm',
            price: '13,90€'
        },
    ];

let addedBasket = [];
let addedAmount = [];
let addedPrice = [];
let Subtotal = 3;

    function render() {
        const orderBox = document.getElementById('orderBox');
        
        orderBox.innerHTML = ``;
    
        for (let i = 0; i < menu.length; i++) {
            const menus = menu[i];
            orderBox.innerHTML += `
            <div class="product">
                <div class="product-details">
                    <h2 class="menuHeadline">${menus.speciality}</h2>
                    <p class="menuHeadline">${menus.ingredients}</p>
                    <p class="menuHeadline">${menus.size}</p>
                </div>
        
                <div class="product-price">
                    <span>${menus.price}</span>
                    <button onclick="addToBasket(${i})" class="x">+</button>
                </div>
            </div>
            `;
        }  
    
        updateSidebarIcon();
    }

    
    




function updateSidebarIcon() {
    const sidebarIcon = document.getElementById('sidebar-icon');
    const basket = document.getElementById('iconContainer');

    if (basket.length > 0) {
        sidebarIcon.style.display = 'none';
    } else {
        sidebarIcon.style.display = 'block';
    }
}

function placeOrder() {
     alert('Vielen Dank für Ihre Bestellung!');
}

______________________________________________________________________

API´s charts.js

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js"></script>

    <div>
        <canvas id="myChart"></canvas>
      </div>
      
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
      
      <script>
        const ctx = document.getElementById('myChart');
      
        new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
            datasets: [{
              label: '# of Votes',
              data: [12, 19, 3, 5, 2, 3],
              borderWidth: 1
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
      </script>
</body>
</html>


_____________________________________________________________
 include Tamplates

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body onload="init()">
    <div w3-include-html="includes/header.html"></div>

    <script src="script.js"></script>
</body>
</html>


Ordner includes > header.html / footer.html

<header>
    <h1 id="headline">Headline</h1>
</header>

script.js 

async function init() {
    await includeHTML();
    document.getElementById('headline').innerHTML = 'Herzlich willkommen!';
}

async function includeHTML() {
    let includeElements = document.querySelectorAll('[w3-include-html]');
    for (let i = 0; i < includeElements.length; i++) {
        const element = includeElements[i];
        file = element.getAttribute("w3-include-html"); // "includes/header.html"
        let resp = await fetch(file);
        if (resp.ok) {
            element.innerHTML = await resp.text();
        } else {
            element.innerHTML = 'Page not found';
        }
    }
}

____________________________________________________________________________________________
Promises: 

function init() {
    fetch('bundesland.json').then(() => {  // lädt etwas runter. Mit .then schreibt man weitere Funktionen mit rein.
        console.log('Fertig');
}, () => {                                                                  
        console.log('Fehler aufgetreten');
    });
}


// 2. Möglichkeit für einzelne ausgaben.
async function init() {
    try {                                 // try = Versuche, und wenn es nich Funktioniert dann catch(e)
        await fetch('bundesland.json');  // async vor function dann await vor fetch.
        console.log('Fertig');
    } catch (e) {
        console.log('Fehler aufgetreten');
    }
}


// 3. Möglichkeit
async function init() {
    await fetch('bundesland.json').catch(errorFunction); // wenn das nicht runterlädt dann kommt Fehler und wird die errorFunction aufgerufen.
    console.log('Fertig');
}

function errorFunction() {
    console.log('Fehler aufgetreten');
}


// 4. Möglichkeit für mehrere ausgaben.
async function init() {
    let [resp, err] = await resolve(fetch('bundesland.json'));
    if (resp) {
        console.log('Fertig');
    } 
    
    if(err){
        console.error('Fehler');
    }
}

async function resolve(p) {
    try {
        let response = await p;   // Promiss auflösen.
        return [response, null];  // Das ergebnis ausgeben/returnen. [response, null] damit geben wir uns zwei werte aus dem Array raus.
    } catch (e) {
        return [null, e];
    }
}

____________________________________________________________________________________________

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="script.js"></script>
    <title>Document</title>
</head>
<body onload="init()">

    <input type="text" id="searchQuery">
    <button onclick="getSynonyms()">Get Synonyms</button>


    <div id="container"></div>


    
</body>
</html>

async function getSynonyms () {
    let query = document.getElementById('searchQuery').value;
    let url = `https://www.openthesaurus.de/synonyme/search?q=${query}&format=application/json`; // Url in einer Variablen enspeichern.
    let response = await fetch(url); // Aus dem internet runterladen. auf einem server warten mit await.
    let responseAsJson = await response.json();
    let synsets = responseAsJson['synsets'];

    renderSynsets(synsets);
}

function renderSynsets (synsets) {
    let container = document.getElementById('container');

    container.innerHTML = `<div>Es wurden <b>${synsets.length}</b>Synonym-Sets geladen</div>`;

    for (let i = 0; i < synsets.length; i++) {
        const synset = synsets[i];
        let terms = synset['terms']; // Diese Variable ist ein Array.
        container.innerHTML += `<h2>Synonym-Set mit ID ${synset['id']}</h2>`;

        for (let j = 0; j < terms.length; j++) {
            const term = terms[j];
            container.innerHTML += `<div>${term['term']}</div>`;  // Variable eingefügt.

            
        }
    }
}

______________________________________________________________________________________________

// Bitcoin Preisentwicklung

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="script.js"></script>
    <title>Bitcoin</title>
</head>
<body onload="loadCourse()">

    <h1>Bitcoin-Kurs</h1>

    <p>Der aktuelle Bitcoin Preis beträgt:</p>
    <p id="course"></p>
    
</body>
</html>

const API_KEY = 'Y0ZRPNL4FIT7UW59';

let month = [
    '2020-10-31', '2020-11-30', '2020-12-31', 
    '2021-01-31', '2021-02-28', '2021-03-31', '2021-04-30', '2021-05-31', '2021-06-30',
    '2021-07-31', '2021-08-31', '2021-09-30', '2021-10-31', '2021-11-30', '2021-12-31',
    '2022-01-31', '2022-02-28', '2022-03-31', '2022-04-30', '2022-05-31', '2022-06-30',
    '2022-07-31', '2022-08-31', '2022-09-30', '2022-10-31', '2022-11-30', '2022-12-31',
    '2023-01-31', '2023-02-28', '2023-03-31', '2023-04-30', '2023-05-31'
];

let course = [];



async function loadCourse() {
    let url = 'https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=BTC&to_currency=USD&apikey=' + API_KEY;
    let response = await fetch(url);
    let responseAsJson = await response.json(); // mit .json umwandeln in ein JSON.
    let currentCourse = (Math.round(responseAsJson['Realtime Currency Exchange Rate']['5. Exchange Rate'])); // Array erweiterung in dem man sich das aus der Konsole ausgibt.

    document.getElementById('course').innerHTML = `<b>${currentCourse} $</b>`;
    loadMonthlyCourse();
}

async function loadMonthlyCourse() {
    let url = 'https://www.alphavantage.co/query?function=DIGITAL_CURRENCY_MONTHLY&symbol=BTC&market=USD&apikey=' + API_KEY;
    let response = await fetch(url);
    let responseAsJson = await response.json();

    let monthlyCourse = responseAsJson['Time Series (Digital Currency Monthly)'];

    console.log(Math.round(responseAsJson['Time Series (Digital Currency Monthly)']));

    for (let i = 0; i < month.length; i++) {
        const courseEachMonth = Math.round(monthlyCourse[month[i]]['1b. open (USD)']);
        course.push(courseEachMonth);
    }
}

_____________________________________________________________________________________________________

    //Promise Grundlagen:

    <script>
        let promError = true;

        function getPromise(){
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    if(promError){
                        reject("Hat nicht geklappt");
                    }else{
                        resolve("Hat geklappt");
                    }
                }, 300);
            });
        }

        function usePromise(){
            let prom = getPromise();
            console.log(prom);
        }
    </script>

</head>
<body onload="usePromise()">
    <h1>PromiseTest</h1>
</body>

    Innerhalb des <head>-Tags befindet sich ein <script>-Element mit JavaScript-Code:
   - let promError = true;: Hier wird eine Variable promError deklariert und auf true gesetzt.
   - function getPromise() { ... }: Diese Funktion erstellt ein neues Promise-Objekt. Ein Promise ist ein Objekt in JavaScript, 
   das für asynchrone Berechnungen verwendet wird. Es repräsentiert einen Wert, der möglicherweise jetzt, später oder nie verfügbar ist.
   - return new Promise((resolve, reject) => { ... }): gibt ein Promise zurück, welches zwei Funktionen als Parameter hat: resolve und reject.
   - Innerhalb des Promises ruft setTimeout eine Funktion auf, nachdem mindestens 300 Millisekunden vergangen sind. Dies simuliert
    asynchrone Operationen wie etwa das Laden von Daten von einem Server.
   - if (promError) { ... } else { ... }: Bestimmt, ob das Promise erfolgreich aufgelöst oder abgelehnt wird,
    basierend auf dem Wert der promError-Variable.
   - reject("Hat nicht geklappt");: Wird ausgeführt, wenn promError wahr ist, und signalisiert, dass das Promise fehlgeschlagen ist.
   - resolve("Hat geklappt");: Wird ausgeführt, wenn promError falsch ist, und signalisiert, dass das Promise erfolgreich aufgelöst wurde.

   function usePromise() { ... }: Diese Funktion ruft getPromise() auf und weist das zurückgegebene Promise-Objekt der Variablen prom zu. 
   Dann wird console.log(prom); aufgerufen, das das Promise-Objekt in der Konsole loggt, um seinen Status und sein Ergebnis anzuzeigen.

   die alte version:

   function getGoodPromise(){
            return new Promise((resolve, reject) => { //resolve, reject sind zwei Parameter.
                setTimeout(() => {
                   console.log("bad");
                   resolve("done_bad");
                }, 1000);
            });
        }

        function getBadPromise(){
            return new Promise((resolve, reject) => { //resolve, reject sind zwei Parameter.
                setTimeout(() => {
                    console.log("good");
                    reject("done_good");
                }, 1000);
            });
        }

        function usePromise(){
            getGoodPromise().then(
             getGoodPromise

            ).then(
                getGoodPromise
            ).then(
                (result) => {
                    console.log(result);
                }

            ).catch((error) => {
                console.error(error);
            }) //then()=was passiert wenn das ganze fertig ist.
        }

        // function usePromise(){
        //     getBadPromise().then(
        //         (result) => {
        //             console.log(result);
        //         }
        //     ).catch((error) => {
        //         console.error(error);
        //     }) //then()=was passiert wenn das ganze fertig ist.
        // }

        die Neue Version:

        let promError = true;

        function getPromise(){
            return new Promise((resolve, reject) => { //resolve, reject sind zwei Parameter.
                setTimeout(() => {
                    if(promError){
                        reject("Hat nicht geklappt");
                    }else{
                        resolve("Hat geklappt");
                    }
                }, 1000);
            });
        }

        async function usePromise(){
            let prom = "nothing happend";
            try {
                prom = await getPromise();
            } catch (error) {
                
            }
            console.log(prom);
        }

        _______________________________________________________________________________________________________
        fettchen:
        mit einer db.json und h1.text datei


    <body onload="fettchDataText()">
    <div id="content"></div>
    <script>
        
        async function fettchDataJson() {
            let response = await fetch('db.json'); //fetch= wir ziehen uns die daten einer url.
            let responseAsJson = await response.json();
            console.log(responseAsJson);
        }

        async function fettchDataText() {
            let response = await fetch('h1.txt'); //fetch= wir ziehen uns die daten einer url.
            let responseAsText = await response.text();
            document.getElementById("content").innerHTML = responseAsText
        }


    </script>
    </body>


   ____________________________________________________________________________________________________________________________

    // pokemon.push(currentPokemon);
    // about.push(currentPokemon);
    // renderPokemonInfo();
    // loadDetails();
    // moves.push(currentPokemon);
    // base.push(currentPokemon);
    // loadAboutDetails(currentPokemon);


    _________________________________________________________________________________________________________________________________

    let pokemon = []; // Array, das die geladenen Pokémon-Objekte speichert

async function init() {
    console.log("init aufgerufen"); // Überprüfen, ob diese Funktion mehrmals aufgerufen wird
    for (let i = 1; i < 29; i++) {
        await loadPokemon(i);
    }
    loadAllPokemon();
}

async function loadPokemon(i) {
    console.log(`Lade Pokemon mit der ID: ${i}`); // Loggt die ID jedes geladenen Pokémon
    let url = `https://pokeapi.co/api/v2/pokemon/${i}`;
    let response = await fetch(url);
    let currentPokemon = await response.json();
    pokemon.push(currentPokemon);
}

function loadAllPokemon() {
    console.log("loadAllPokemon aufgerufen"); // Überprüfen, ob diese Funktion mehrmals aufgerufen wird
    let query = document.getElementById('searchPokemon').value.toLowerCase();
    let cardsContainer = document.getElementById('cards');
    cardsContainer.innerHTML = '';
    pokemon.forEach((pkm, index) => {
        console.log("Anzeigen von Pokémon Index:", index);
        if (pkm.name.toLowerCase().includes(query)) {
            cardsContainer.innerHTML += createPokemonCard(pkm);
        }
    });
}

        // Erstellt das HTML für eine Pokémon-Karte
        function createPokemonCard(pkm) {
            let pokemonName = pkm.name; // Name des Pokémon
            let firstType = pkm.types[0].type.name; // Der Haupttyp des Pokémon
            let images = pkm.sprites.other.home.front_default; // Bild des Pokémon
            let cardType = ['fire', 'water', 'bug', 'electric', 'normal', 'poison', 'ground', 'fairy', 'rock', 'fighting', 'psychic'].includes(firstType) ? firstType : 'grass';
            // Bestimmt den Typ des Pokémon und ordnet einen Standardtyp zu, falls nicht in der Liste
            return `
            <div class="pokemoncard ${cardType}">
                <div class="textContainer">
                    <p>${pokemonName}</p>
                    <p>${firstType}</p>
                </div>
                <div class="imgContainer">
                    <img class="small-img" src="${images}" alt="Bild von ${pokemonName}">
                </div>
            </div>
            `; // Rückgabe des HTML-Strings für die Karte
        }

        _________________________________________________________________________________________________________________________________

        let pokemon = [];
let stats = [];
let currentPokemonIndex = 0; // Hält den Index des aktuellen Pokémon

async function init() {
    console.log("init aufgerufen");
    for (let i = 1; i < 29; i++) {
        await loadPokemon(i);
    }
    loadAllPokemon();
}

async function loadPokemon(i) {
    let url = `https://pokeapi.co/api/v2/pokemon/${i}`;
    let response = await fetch(url);
    let currentPokemon = await response.json();
    pokemon.push(currentPokemon);
    console.log(currentPokemon);
}

function loadAllPokemon() {
    let query = document.getElementById('searchPokemon').value.toLowerCase();
    let cardsContainer = document.getElementById('cards');
    cardsContainer.innerHTML = '';
    pokemon.forEach((pkm, index) => {
        console.log("Anzeigen von Pokémon Index:", index);
        if (pkm.name.toLowerCase().includes(query)) {
            cardsContainer.innerHTML += createPokemonCard(pkm);
        }
    });
}

function createPokemonCard(pkm) {
    let height = pkm.height;
    let weight = pkm.weight;
    let id = pkm.id;
    let ability = pkm.abilities[0].ability.name;
    
    let moves = pkm.moves.map(function(move) {
        return move.move.name;
    });

    let stats = pkm.stats.map(function(stat) {
        return stat.stat.name;
    });

    let pokemonName = pkm.name;
    let firstType = pkm.types[0].type.name;
    let images = pkm.sprites.other.home.front_default;
    let cardType = ['fire', 'water', 'bug', 'electric', 'normal', 'poison', 'ground', 'fairy', 'rock', 'fighting', 'psychic', 'ghost'].includes(firstType) ? firstType : 'grass';

    return `
        <div class="flexContainer">
            <div class="pokemoncard ${cardType}" onclick="showBigCard('${pokemonName}', '${firstType}', '${images}', '${height}', '${weight}', '${ability}', '${moves}', '${stats}', ${id})">
                <div class="textContainer">
                    <p class="pokemonName">${pokemonName}</p>
                    <span class="edge"><p class="pokemonType">${firstType}</p></span>
                </div>
                <div class="imgContainer">
                    <img class="small-img" src="${images}" alt="Bild von ${pokemonName}">
                </div>
            </div>
        </div>
    `;
}

function getTypeClass(type) {
    const typeClasses = {
        grass: 'grass', fire: 'fire', water: 'water', bug: 'bug', electric: 'electric',
        normal: 'normal', poison: 'poison', ground: 'ground', fairy: 'fairy', rock: 'rock',
        fighting: 'fighting', psychic: 'psychic', ghost: 'ghost'
    };
    return typeClasses[type] || 'grass'; // Standardwert, wenn der Typ nicht in der Liste ist
}

function showBigCard(pokemonName, firstType, images, height, weight, ability, moves, stats, id) {
    let maxContent = document.getElementById('max-content');
    let typeClass = getTypeClass(firstType); // Holen der entsprechenden CSS-Klasse basierend auf dem Typ
    maxContent.innerHTML = `
        <div class="dex-info-container">
            <div id="pokedex" class="${typeClass}">
                <div class="special-character">
                    <span id="leftArrow" onclick="leftPokemon()">🠔</span>
                    <span id="heart">♡</span>
                </div>
                
                <h1 id="pokemonName">${pokemonName}</h1>
                <div class="type-id">
                    <div id="pokeColor">
                        <div id="type">${firstType}</div>
                    </div>
                    <div class="id"># ${id}</div>
                </div>
                <div class="img-arrow">
                    <div class="left-arrow">
                        <img class="arrow" src="./img/arrow-left.png" onclick="leftPokemon()">
                    </div>
                    <div id="imageContainer">
                        <img id="charmanderImage" src="${images}" alt="Bild">
                    </div>
                    <div class="right-arrow">
                        <img class="arrow" src="./img/arrow-right.png" onclick="nextPokemon()">
                    </div>
                </div>
            </div>
            <div id="pokeInfo" class="info-container">
                <div class="section-headline">
                    <div class="span">
                        <a onclick="loadAboutDetails('${ability}', '${weight}', '${height}')" class="nav-link nav-link-grow-up">About</a>
                        <a onclick="loadBaseDetails('${stats}')" class="nav-link nav-link-grow-up">Stats</a>
                        <a onclick="loadMoveDetails('${moves}')" class="nav-link nav-link-grow-up">Move</a>
                    </div>
                </div>
                <div class="section-information">
                    <div id="aboutContainer" class="aboutContainer"></div>
                    <div id="baseStatsContainer" class="baseStatsContainer"></div>
                    <div id="moveContainer" class="moveContainer"></div>
                </div>
            </div>
        </div>
    `;
    maxContent.style.display = "block"; // Zeigt die größere Karte an
    document.getElementById('leftArrow').addEventListener('click', hideBigCard);
}

function hideBigCard() {
    let maxContent = document.getElementById('max-content');
    maxContent.style.display = "none"; // Verbirgt die große Karte
}

function loadAboutDetails(height, weight, ability) {
    document.getElementById('aboutContainer').style.display = 'block';
    document.getElementById('baseStatsContainer').style.display = 'none';
    document.getElementById('moveContainer').style.display = 'none';
    let aboutContainer = document.getElementById('aboutContainer');
    aboutContainer.innerHTML = '';
    aboutContainer.innerHTML += `
        <table class="aboutCharmander">
            <tr>
                <td class="td-left">Ability</td>
                <td>${height}</td>
            </tr>
            <tr>
                <td class="td-left">Height</td>
                <td>${ability}</td>
            </tr>
            <tr>
                <td class="td-left">Weight</td>
                <td>${weight}</td>
            </tr>
        </table>`;
}

function loadBaseDetails(stats) {
    document.getElementById('aboutContainer').style.display = 'none';
    document.getElementById('baseStatsContainer').style.display = 'block';
    document.getElementById('moveContainer').style.display = 'none';
    let baseStatsContainer = document.getElementById('baseStatsContainer');

    // Initialisiere ein leeres Array, um die formatierten Stats zu speichern
    let formattedStatsHTML = '';

    // Initialisiere eine Variable, um die aktuelle Position im String zu speichern
    let startPos = 0;

    // Iteriere durch den Stats-String
    for (let i = 0; i <= stats.length; i++) {
        // Überprüfe, ob das aktuelle Zeichen ein Zeilenumbruch ist oder das Ende des Strings erreicht wurde
        if (stats[i] === '\n' || i === stats.length) {
            // Extrahiere die Zeile aus dem Stats-String
            let stat = stats.substring(startPos, i);
            // Füge jeden Wert dem HTML-String hinzu
            formattedStatsHTML += `<span class="base">${stat}</span><br>`;
            // Aktualisiere die Startposition für die nächste Zeile
            startPos = i + 1;
        }
    }

    baseStatsContainer.innerHTML = `
        <div class="baseStats">
            ${formattedStatsHTML}
        </div>
    `;
}


function nextPokemon() {
    if (currentPokemonIndex < pokemon.length - 1) {
        currentPokemonIndex++;
        const nextPokemon = pokemon[currentPokemonIndex];
        showBigCard(
            nextPokemon.name,
            nextPokemon.types[0].type.name,
            nextPokemon.sprites.other.home.front_default,
            nextPokemon.height,
            nextPokemon.weight,
            nextPokemon.abilities[0].ability.name,
            nextPokemon.moves[0].move.name,
            nextPokemon.stats[0].stat.name,
            nextPokemon.id,
            currentPokemonIndex
        );
    }
}

function leftPokemon() {
    if (currentPokemonIndex > 0) {
        currentPokemonIndex--;
        const previousPokemon = pokemon[currentPokemonIndex];
        showBigCard(
            previousPokemon.name,
            previousPokemon.types[0].type.name,
            previousPokemon.sprites.other.home.front_default,
            previousPokemon.height,
            previousPokemon.weight,
            previousPokemon.abilities[0].ability.name,
            previousPokemon.moves[0].move.name,
            previousPokemon.stats[0].stat.name,
            previousPokemon.id,
            currentPokemonIndex
        );
    }
}


_____________________________________________________________________________

// function renderPokemonInfo() {
//     let bigCard = document.getElementById('max-content');
//     bigCard.innerHTML = `
//         <div id="pokedex">
//             <div class="special-character">
//                 <span id="leftArrow">🠔</span>
//                 <span id="heart">♡</span>
//             </div>
//             <h1 id="pokemonName">${currentPokemon['name']}</h1>
//             <div id="pokeColor">
//                 <div id="type">${currentPokemon['types'][0]['type']['name']}</div>
//             </div>
//             <div id="imageContainer">
//                 <img id="charmanderImage" src="${currentPokemon['sprites']['other']['dream_world']['front_default']}" alt="charmander Bild">
//             </div>
//             <div id="pokeInfo" class="info-container"></div>
//         </div>
//     `;
// }

// function loadDetails() {
//     let details = document.getElementById('pokeInfo');
//     details.innerHTML = '';

//         details.innerHTML = `
//         <div class="section-headline">
//             <div class="span">
//                 <a onclick="loadAboutDetails()" class="nav-link nav-link-grow-up">About</a>
//                 <a onclick="loadBaseDetails()" class="nav-link nav-link-grow-up">Stats</a>
//                 <a onclick="loadMoveDetails()" class="nav-link nav-link-grow-up">Move</a>
//             </div>
            
//         </div>
//         <div id="aboutContainer" class=""></div>
//         <div id="baseStatsContainer" class=""></div>
//         <div id="moveContainer" class=""></div>
//         `;
//         loadBaseDetails();
//         loadMoveDetails();
// }

// function loadAboutDetails() {
//     let aboutContainer = document.getElementById('aboutContainer');
//     aboutContainer.innerHTML = ``;

//     for (let i = 0; i < about.length; i++) {
//         const currentPokemon = about[i];
//         aboutContainer.innerHTML += `
//         <table class="aboutCharmander">
//             <tr>
//                 <td class="td-left">Ability</td>
//                 <td>${currentPokemon['abilities']['0']['ability']['name']}</td>
//             </tr>
//             <tr>
//                 <td class="td-left">Height</td>
//                 <td>${currentPokemon['height']}</td>
//             </tr>
//             <tr>
//                 <td class="td-left">Weight</td>
//                 <td>${currentPokemon['weight']}</td>
//             </tr>
//         </table>height`;

//         for (let j = 0; j < moves.length; j++) {
//             const currentPokemon = moves[j];
//             moveContainer.innerHTML = "";
        
//             for (let i = 0; i < 21; i++) {
//                 if (currentPokemon.moves[i] && currentPokemon.moves[i].move) {
//                     moveContainer.innerHTML += `
//                         <div class="movements">
//                             <span class="move">${currentPokemon.moves[i].move.name}</span>
//                         </div>
//                     `;
//                 }
//             }
//         }

        // for (let b = 0; b < base.length; b++) {
        //     const currentPokemon = base[b];
        //     baseStatsContainer.innerHTML = "";

        //     for (let i = 0; i < 6; i++) {
        //         if(currentPokemon.stats[i] && currentPokemon.stats[i].stat) {
        //             baseStatsContainer.innerHTML += `
        //                 <div class="baseStats">
        //                     <span class="base">${currentPokemon.stats[i].stat.name}</span>
        //                 </div>
        //             `;
        //         }
              
        //      }
        // }
        
//     }
//     document.getElementById('aboutContainer').style.display = 'block';
//     document.getElementById('baseStatsContainer').style.display = 'none';
//     document.getElementById('moveContainer').style.display = 'none';
    
// }

// function loadBaseDetails() {
//     document.getElementById('aboutContainer').style.display = 'none';
//     document.getElementById('baseStatsContainer').style.display = 'block';
//     document.getElementById('moveContainer').style.display = 'none';


// }

// function loadMoveDetails() {
//     document.getElementById('aboutContainer').style.display = 'none';
//     document.getElementById('baseStatsContainer').style.display = 'none';
//     document.getElementById('moveContainer').style.display = 'flex';
// }





function loadAboutDetails(height, weight, ability) {
    document.getElementById('aboutContainer').style.display = 'block';
    document.getElementById('baseStatsContainer').style.display = 'none';
    document.getElementById('moveContainer').style.display = 'none';
    let aboutContainer = document.getElementById('aboutContainer');
    aboutContainer.innerHTML = '';
    aboutContainer.innerHTML += `
        <table class="aboutCharmander">
            <tr>
                <td class="td-left">Ability</td>
                <td>${height}</td>
            </tr>
            <tr>
                <td class="td-left">Height</td>
                <td>${ability}</td>
            </tr>
            <tr>
                <td class="td-left">Weight</td>
                <td>${weight}</td>
            </tr>
        </table>`;
}


function loadBaseDetails(stats) {
    // document.getElementById('aboutContainer').style.display = 'none';
    // document.getElementById('baseStatsContainer').style.display = 'block';
    // document.getElementById('moveContainer').style.display = 'none';
//     let baseStatsContainer = document.getElementById('baseStatsContainer');
//     baseStatsContainer.innerHTML = `
//         <div class="baseStats">
//             <span class="base">${stats}</span>
//         </div>
//     `;
// }


_______________________________________________________________________________

let pokemon = [];
currentPokemonIndex = 0; 

async function init() {
    console.log("init aufgerufen");
    for (let i = 1; i < 29; i++) {
        await loadPokemon(i);
    }
    loadAllPokemon();
}

async function loadPokemon(i) {
    let url = `https://pokeapi.co/api/v2/pokemon/${i}`;
    let response = await fetch(url);
    let currentPokemon = await response.json();
    pokemon.push(currentPokemon);
    console.log(currentPokemon);
}

function loadAllPokemon() {
    let query = document.getElementById('searchPokemon').value.toLowerCase();
    let cardsContainer = document.getElementById('cards');
    cardsContainer.innerHTML = '';
    console.log("Anzeigen von Pokémon Index:", index);
        for (let i = 0; i < currentPokemon.length; i++) {
            let pokemonName = currentPokemon[i]['name'];
            let pkmImages = currentPokemon[i]['sprites']['other']['home']['front_default'];
            let typeName = currentPokemon[i]['types']['0']['type']['name'];

            if (pokemonName.name.toLowerCase().includes(query)) {
                let pkmType = ['fire', 'water', 'bug', 'electric', 'normal', 'poison', 'ground', 'fairy', 'rock', 'fighting', 'psychic', 'ghost'].includes(firstType) ? firstType : 'grass'
                cardsContainer.innerHTML += createPokemonCard(pkmType, i, pkmImages, pkmImages, typeName);

            }
        }
}

function createPokemonCard(i) {
    let names = currentPokemon[i]['name'];
    let id = currentPokemon[i]['id'];
    let types = currentPokemon[i]["types"]["0"]["type"]["name"];
    let images = currentPokemon[i]['sprites']['other']['home']['front_default'];
    let species = currentPokemon[i]['species']['name'];
    let height = currentPokemon[i]['height'];
    let weight = currentPokemon[i]['weight'];
    let abilities = currentPokemon[i]['abilities']["0"]["ability"]["name"];
    let baseexperience = currentPokemon[i]["base_experience"];
    let typeColor = ['fire', 'water', 'bug', 'electric', 'normal', 'poison', 'ground', 'fairy', 'rock', 'fighting', 'psychic'].includes(types) ? types : 'grass';
    let cardColor = ['fire', 'water', 'bug', 'electric', 'normal', 'poison', 'ground', 'fairy', 'rock', 'fighting', 'psychic'].includes(types) ? types : 'grass';
    document.getElementById('pokemon-card').innerHTML = cardHTML(cardColor, names, id, typeColor, types, images, species, height, weight, types, abilities, baseexperience);
    
}

    function cardHTML(cardColor, names, id, typeColor, types, images, species, height, weight, types, abilities, baseexperience){
    return `
        <div class="flexContainer">
            <div class="pokemoncard ${cardType}" onclick="showBigCard('${pokemonName}', '${firstType}', '${images}', '${height}', '${weight}', '${ability}', '${moves}', '${stats}', ${id})">
                <div class="textContainer">
                    <p class="pokemonName">${pokemonName}</p>
                    <span class="edge"><p class="pokemonType">${firstType}</p></span>
                </div>
                <div class="imgContainer">
                    <img class="small-img" src="${images}" alt="Bild von ${pokemonName}">
                </div>
            </div>
        </div>
    `;
}

function getTypeClass(type) {
    const typeClasses = {
        grass: 'grass', fire: 'fire', water: 'water', bug: 'bug', electric: 'electric',
        normal: 'normal', poison: 'poison', ground: 'ground', fairy: 'fairy', rock: 'rock',
        fighting: 'fighting', psychic: 'psychic', ghost: 'ghost'
    };
    return typeClasses[type] || 'grass';
}

function showBigCard(pokemonName, firstType, images, height, weight, ability, moves, stats, id) {
    let maxContent = document.getElementById('max-content');
    let typeClass = getTypeClass(firstType);
    maxContent.innerHTML = `
        <div class="dex-info-container">
            <div id="pokedex" class="${typeClass}">
                <div class="special-character">
                    <span id="leftArrow" onclick="leftPokemon()">🠔</span>
                    <span id="heart">♡</span>
                </div>
                
                <h1 id="pokemonName">${pokemonName}</h1>
                <div class="type-id">
                    <div id="pokeColor">
                        <div id="type">${firstType}</div>
                    </div>
                    <div class="id"># ${id}</div>
                </div>
                <div class="img-arrow">
                    <div class="left-arrow">
                        <img class="arrow" src="./img/arrow-left.png" onclick="leftPokemon()">
                    </div>
                    <div id="imageContainer">
                        <img id="charmanderImage" src="${images}" alt="Bild">
                    </div>
                    <div class="right-arrow">
                        <img class="arrow" src="./img/arrow-right.png" onclick="nextPokemon()">
                    </div>
                </div>
            </div>
            <div id="pokeInfo" class="info-container">
                <div class="section-headline">
                    <div class="span">
                        <a onclick="loadAboutDetails('${ability}', '${weight}', '${height}')" class="nav-link nav-link-grow-up">About</a>
                        <a onclick="loadBaseDetails('${stats}')" class="nav-link nav-link-grow-up">Stats</a>
                        <a onclick="loadMoveDetails('${moves}')" class="nav-link nav-link-grow-up">Move</a>
                    </div>
                </div>
                <div class="section-information">
                    <div id="aboutContainer" class="aboutContainer"></div>
                    <div id="baseStatsContainer" class="baseStatsContainer"></div>
                    <div id="moveContainer" class="moveContainer"></div>
                </div>
            </div>
        </div>
    `;
    maxContent.style.display = "block";
    document.getElementById('leftArrow').addEventListener('click', hideBigCard);
}

function hideBigCard() {
    let maxContent = document.getElementById('max-content');
    maxContent.style.display = "none"; 
}

function loadAboutDetails(height, weight, ability) {
    let aboutContainer = document.getElementById('aboutContainer');
    aboutContainer.innerHTML = '';

    aboutContainer.innerHTML += `
        <table class="aboutCharmander">
            <tr>
                <td class="td-left">Ability</td>
                <td>${ability}</td>
            </tr>
            <tr>
                <td class="td-left">Height</td>
                <td>${height}</td>
            </tr>
            <tr>
                <td class="td-left">Weight</td>
                <td>${weight}</td>
            </tr>
        </table>`;
}

function loadMoveDetails (moves) {
    let moveContainer = document.getElementById('moveContainer');
    moveContainer.innerHTML = '';

    for (let i = 0; i < 6; i++) {
        if (moves[i] && moves[i].move) {
            moveContainer.innerHTML += `
                <div class="baseStats">
                    <span class="base">${moves[i].move.name}</span>
                </div>
            `;
        }
    }
}

function loadBaseDetails(stats) {
    let baseStatsContainer = document.getElementById('baseStatsContainer');
    baseStatsContainer.innerHTML = '';

    for (let l = 0; l < base.length; l++) {
        const stats = base[l];

        for (let i = 0; i < 6; i++) {
            if (stats[i] && stats[i].stat) {
                baseStatsContainer.innerHTML += `
                    <div class="baseStats">
                        <span class="base">${stats[i].stat.name}</span>
                    </div>
                `;
            }
        }
        
    }

    
}

    


function nextPokemon() {
    if (currentPokemonIndex < pokemon.length - 1) {
        currentPokemonIndex++;
        const nextPokemon = pokemon[currentPokemonIndex];
        showBigCard(
            nextPokemon.name,
            nextPokemon.types[0].type.name,
            nextPokemon.sprites.other.home.front_default,
            nextPokemon.height,
            nextPokemon.weight,
            nextPokemon.abilities[0].ability.name,
            nextPokemon.moves[0].move.name,
            nextPokemon.stats[0].stat.name,
            nextPokemon.id,
            currentPokemonIndex
        );
    }
}

function leftPokemon() {
    if (currentPokemonIndex > 0) {
        currentPokemonIndex--;
        const lastPokemon = pokemon[currentPokemonIndex];
        showBigCard(
            lastPokemon.name,
            lastPokemon.types[0].type.name,
            lastPokemon.sprites.other.home.front_default,
            lastPokemon.height,
            lastPokemon.weight,
            lastPokemon.abilities[0].ability.name,
            lastPokemon.moves[0].move.name,
            lastPokemon.stats[0].stat.name,
            lastPokemon.id,
            currentPokemonIndex
        );
    }
}

______________________________________________________________________________

function showCategory() {
    document.getElementById('aboutContainer').style.display = 'none';
    document.getElementById('baseStatsContainer').style.display = 'none';
    document.getElementById('moveContainer').style.display = 'flex';

    document.getElementById('aboutContainer').style.display = 'none';
    document.getElementById('baseStatsContainer').style.display = 'block';
    document.getElementById('moveContainer').style.display = 'none';

    document.getElementById('aboutContainer').style.display = 'block';
    document.getElementById('baseStatsContainer').style.display = 'none';
    document.getElementById('moveContainer').style.display = 'none';

    loadBaseDetails();
    loadMoveDetails(); 
    loadAboutDetails();
}


____________________________________________________________________________________

fruits = {
            family: "Ebenaceae",
            genus: "Diospyros",
            id: 52,
            name: "Persimmon",
            nutritions: {
                calories: 81,
                carbohydrates: 18,
                fat: 0,
                protein: 0,
                sugar: 18
            }
        
            
        };
        
        async function fettchDataJson() {
            let response = await fetch('https://www.fruityvice.com/api/fruit/all'); //fetch= wir ziehen uns die daten einer url.
            let responseAsJson = await response.json();
            document.getElementById('content').innerHTML = responseAsJson;
            console.log(responseAsJson);
        }

        // Example POST method implementation:
        async function postData(url = "", data = {}) {
        // Default options are marked with *
        const response = await fetch(url, {
            method: "POST", // *GET, POST, PUT, DELETE, etc.
            headers: {
            "Content-Type": "application/json",
            // 'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: JSON.stringify(data), // body data type must match "Content-Type" header
        });
        return response.json(); // parses JSON response into native JavaScript objects
        }

        // function getList() {
        //     document.getElementById('content');
        //     content.innerHTML += '';
        //     for (let i = 0; i  < fruits.length; i++) {
        //         const fruits = fruits[i];
                
                
        //     }
        // }

        ____________________________________________
        // Join button

        <button onclick="editSubtask(${task.id}, ${index})">Edit</button>
              <button onclick="removeSubtask(${task.id}, ${index})">Delete</button>

              function removeSubtask(taskId, subtaskIndex) {
  let tasks = JSON.parse(sessionStorage.getItem('tasks'));
  let task = tasks[taskId];
  let subtasks = JSON.parse(task.subtasks || "[]");

  subtasks.splice(subtaskIndex, 1);
  task.subtasks = JSON.stringify(subtasks);
  sessionStorage.setItem('tasks', JSON.stringify(tasks));
  loadSubtasks(task, document.getElementById('subtasks-list'));
}


function editSubtask(taskId, subtaskIndex) {
  let tasks = JSON.parse(sessionStorage.getItem('tasks'));
  let task = tasks[taskId];
  let subtasks = JSON.parse(task.subtasks || "[]");
  
  let subtaskKey = Object.keys(subtasks[subtaskIndex])[0];
  let newTaskText = prompt("Edit subtask", subtaskKey); 

  if (newTaskText !== null && newTaskText.trim() !== "") {
      subtasks[subtaskIndex] = { [newTaskText]: subtasks[subtaskIndex][subtaskKey] };
      task.subtasks = JSON.stringify(subtasks);
      sessionStorage.setItem('tasks', JSON.stringify(tasks));
      loadSubtasks(task, document.getElementById('subtasks-list'));
  }
}

